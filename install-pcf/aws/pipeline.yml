resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: terraform-state
  type: s3
  source:
    disable_ssl: false
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    endpoint: ((S3_ENDPOINT))
    bucket: ((S3_OUTPUT_BUCKET))
    region_name: ((aws_region))
    versioned_file: terraform.tfstate

- name: pcf-pipelines
  type: git
  source:
    ((pcf_pipelines_git))
- name: config
  type: git
  source:
    ((config_git))
- name: pivnet-opsmgr
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_major_minor_version))
    sort_by: semver

jobs:
- name: bootstrap-terraform-state
  serial_groups: [terraform]
  plan:
  - get: pcf-pipelines
  - task: create-terraform-state
    params:
      S3_BUCKET_TERRAFORM: ((S3_OUTPUT_BUCKET))
      S3_ENDPOINT: ((S3_ENDPOINT))
      S3_REGION: ((aws_region))
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
    file: pcf-pipelines/tasks/create-initial-terraform-state/task.yml

- name: create-infrastructure
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: pcf-pipelines
    - get: config
    - get: terraform-state
    - get: pivnet-opsmgr
      params:
        globs: ["*AWS.yml"]
  - task: find-ami
    params:
      REGION: ((aws_region))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: czero/rootfs
      inputs:
      - name: pivnet-opsmgr
      outputs:
      - name: ami
      params:
        REGION:
      run:
        path: bash
        args:
        - -c
        - |
          ami=$(grep $REGION pivnet-opsmgr/*.yml | cut -d' ' -f2)
          echo $ami > ami/ami

  - task: create-infrastructure
    file: pcf-pipelines/install-pcf/aws/tasks/prepare-aws/task.yml
    ensure:
      put: terraform-state
      params:
        file: terraform-state-output/terraform.tfstate

  - task: prepare-rds
    file: pcf-pipelines/install-pcf/aws/tasks/prepare-rds/task.yml

- name: configure-director
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: pcf-pipelines
    - get: terraform-state
      trigger: true
      passed: [create-infrastructure]
    - get: config
    - get: config-out
      resource: config
  - task: config-opsman-auth
    file: pcf-pipelines/tasks/config-opsman/task.yml
  - task: configure-director
    file: pcf-pipelines/install-pcf/aws/tasks/config-director/task.yml
  - put: config
    params:
     repository: config-out
- name: wipe-env
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: terraform-state/terraform.tfstate
  plan:
  - aggregate:
    - get: pcf-pipelines
    - get: terraform-state
    - get: config
  - task: wipe
    file: pcf-pipelines/install-pcf/aws/tasks/wipe-env/task.yml
